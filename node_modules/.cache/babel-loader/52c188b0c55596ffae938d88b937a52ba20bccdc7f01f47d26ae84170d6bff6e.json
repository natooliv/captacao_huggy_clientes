{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-11b5e247\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Nome\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Email\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Telefone\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Ações\"), /*#__PURE__*/_createCommentVNode(\" Adicionei a coluna para as ações \")])], -1 /* HOISTED */));\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_EditContactModal = _resolveComponent(\"EditContactModal\", true);\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"search\",\n    placeholder: \"Buscar contato\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchQuery = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchQuery]]), _createCommentVNode(\" Tabela de contatos \"), $data.searchQuery.length > 0 ? (_openBlock(), _createElementBlock(\"table\", _hoisted_1, [_hoisted_2, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredContacts, contact => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: contact.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(contact.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(contact.email), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(contact.phone), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $options.openEditModal(contact)\n    }, \"Editar\", 8 /* PROPS */, _hoisted_3), _createCommentVNode(\" Botão para abrir o modal de edição \")])]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Modal de edição \"), _createVNode(_component_EditContactModal, {\n    contact: $data.selectedContact,\n    onUpdate: $options.updateContact\n  }, null, 8 /* PROPS */, [\"contact\", \"onUpdate\"])]);\n}","map":{"version":3,"names":["key","_createElementVNode","_createCommentVNode","_createElementBlock","type","placeholder","_cache","$event","$data","searchQuery","length","_hoisted_1","_hoisted_2","_Fragment","_renderList","$options","filteredContacts","contact","id","_toDisplayString","name","email","phone","onClick","openEditModal","_hoisted_3","_createVNode","_component_EditContactModal","selectedContact","onUpdate","updateContact"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/EditContactModal.vue"],"sourcesContent":["<template>\n    <div>\n      <input type=\"search\" placeholder=\"Buscar contato\" v-model=\"searchQuery\">\n      <!-- Tabela de contatos -->\n      <table v-if=\"searchQuery.length > 0\">\n        <thead>\n          <tr>\n            <th>Nome</th>\n            <th>Email</th>\n            <th>Telefone</th>\n            <th>Ações</th> <!-- Adicionei a coluna para as ações -->\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"contact in filteredContacts\" :key=\"contact.id\">\n            <td>{{ contact.name }}</td>\n            <td>{{ contact.email }}</td>\n            <td>{{ contact.phone }}</td>\n            <td>\n              <button @click=\"openEditModal(contact)\">Editar</button> <!-- Botão para abrir o modal de edição -->\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <!-- Modal de edição -->\n      <EditContactModal :contact=\"selectedContact\" @update=\"updateContact\" />\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import EditContactModal from './EditContactModal'; // Importe o componente de modal de edição\n  \n  export default {\n    name: 'ContactList',\n    components: {\n      EditContactModal,\n    },\n    data() {\n      return {\n        searchQuery: '',\n        contacts: [],\n        selectedContact: null, // Contato selecionado para edição\n      };\n    },\n    computed: {\n      filteredContacts() {\n        return this.contacts.filter(contact =>\n          contact.name.toLowerCase().includes(this.searchQuery.toLowerCase())\n        );\n      },\n    },\n    mounted() {\n      this.fetchContacts();\n    },\n    methods: {\n      fetchContacts() {\n        axios.get('http://localhost:8000/api/clientes')\n          .then(response => {\n            console.log('Resposta da API ao buscar clientes:', response.data);\n            if (Array.isArray(response.data)) {\n              this.contacts = response.data;\n            } else {\n              console.error('A resposta da API não é um array:', response.data);\n              this.contacts = [];\n            }\n          })\n          .catch(error => {\n            console.error('Ocorreu um erro ao buscar os clientes:', error);\n            this.contacts = [];\n          });\n      },\n      openEditModal(contact) {\n        this.selectedContact = contact; // Define o contato selecionado para edição\n      },\n      updateContact(updatedContact) {\n        // Atualiza o contato na lista após a edição\n        const index = this.contacts.findIndex(contact => contact.id === updatedContact.id);\n        if (index !== -1) {\n          this.contacts.splice(index, 1, updatedContact);\n        }\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Estilos para ContactList */\n  </style>\n  "],"mappings":";;;EAAAA,GAAA;AAAA;gEAKQC,mBAAA,CAOQ,gB,aANNA,mBAAA,CAKK,a,aAJHA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAAc,YAAV,OAAK,G,aACTA,mBAAA,CAAiB,YAAb,UAAQ,G,aACZA,mBAAA,CAAc,YAAV,OAAK,G,aAAMC,mBAAA,sCAAyC,C;mBAVpE;;;uBACIC,mBAAA,CAyBM,c,gBAxBJF,mBAAA,CAAwE;IAAjEG,IAAI,EAAC,QAAQ;IAACC,WAAW,EAAC,gBAAgB;IAFvD,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAEiEC,KAAA,CAAAC,WAAW,GAAAF,MAAA;iDAAXC,KAAA,CAAAC,WAAW,E,GACtEP,mBAAA,wBAA2B,EACdM,KAAA,CAAAC,WAAW,CAACC,MAAM,Q,cAA/BP,mBAAA,CAmBQ,SAvBdQ,UAAA,GAKQC,UAOQ,EACRX,mBAAA,CASQ,iB,kBARNE,mBAAA,CAOKU,SAAA,QArBfC,WAAA,CAcgCC,QAAA,CAAAC,gBAAgB,EAA3BC,OAAO;yBAAlBd,mBAAA,CAOK;MAPoCH,GAAG,EAAEiB,OAAO,CAACC;QACpDjB,mBAAA,CAA2B,YAAAkB,gBAAA,CAApBF,OAAO,CAACG,IAAI,kBACnBnB,mBAAA,CAA4B,YAAAkB,gBAAA,CAArBF,OAAO,CAACI,KAAK,kBACpBpB,mBAAA,CAA4B,YAAAkB,gBAAA,CAArBF,OAAO,CAACK,KAAK,kBACpBrB,mBAAA,CAEK,aADHA,mBAAA,CAAuD;MAA9CsB,OAAK,EAAAhB,MAAA,IAAEQ,QAAA,CAAAS,aAAa,CAACP,OAAO;OAAG,QAAM,iBAnB5DQ,UAAA,GAmBsEvB,mBAAA,wCAA2C,C;wCAnBjHA,mBAAA,gBAwBMA,mBAAA,qBAAwB,EACxBwB,YAAA,CAAuEC,2BAAA;IAApDV,OAAO,EAAET,KAAA,CAAAoB,eAAe;IAAGC,QAAM,EAAEd,QAAA,CAAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}