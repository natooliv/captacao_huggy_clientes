{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-26084dc2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"login-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"login-title\"\n}, \"Login\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"button\", {\n    class: \"login-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.loginWithHuggy && $options.loginWithHuggy(...args))\n  }, \"Fazer login com a Huggy\")]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","onClick","_cache","args","$options","loginWithHuggy"],"sources":["/home/natalia/teste_huggy_/huggy/src/views/Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <h1 class=\"login-title\">Login</h1>\n    <button class=\"login-button\" @click=\"loginWithHuggy\">Fazer login com a Huggy</button>\n  </div>\n\n</template>\n\n<script>\nexport default {\n  name: 'LoginForm',\n  methods: {\n    async loginWithHuggy() {\n      try {\n        // Faz a chamada para autenticar o usuário com o backend\n        const response = await fetch('http://localhost:8000/api/auth/google', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (response.ok) {\n          // Autenticação bem-sucedida\n          console.log('Usuário autenticado com sucesso.');\n\n          // Redireciona para a rota \"dashboard\" usando o Vue Router\n          this.$router.push('/dashboard');\n        } else {\n          // Trata o erro de autenticação\n          console.error('Erro ao autenticar usuário:', response.statusText);\n        }\n      } catch (error) {\n        // Trata erros de rede ou outros erros\n        console.error('Erro ao autenticar usuário:', error.message);\n      }\n    }\n  }\n}\n</script>\n<style scoped>\n.login-container {\n  display: flex;\n  \n  align-items: center;\n  padding: 18px, 0px, 18px, 0px;\n  Gap: 24px;\n}\n\n.login-title {\n  margin-bottom: 20px; /* Espaçamento entre o título e o botão */\n  color: #262626; /* Cor do título */\n  font-size: 24px; /* Tamanho do texto para mobile */\n  font-family: 'Roboto', sans-serif;\n  line-height: 32px;\n  Width:60px;\n  Height:32px;\n  \n}\n\n.login-button {\n  background-color: #321BDE;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 9px 12px;\n  text-transform: uppercase;\n  font-weight: bold;\n  cursor: pointer;\n  transition: background-color 0.3s;\n  width: 100%;\n  max-width: 300px;\n}\n\n/* Estilos para tablets */\n@media (min-width: 600px) {\n  .login-title {\n    font-size: 28px; /* Tamanho do texto para tablets */\n  }\n  \n  .login-button {\n    padding: 12px 24px;\n  }\n}\n\n/* Estilos para desktops e telas maiores */\n@media (min-width: 1024px) {\n  .login-title {\n    font-size: 32px; /* Tamanho do texto para desktops */\n  }\n\n  .login-button {\n    padding: 14px 28px;\n  }\n}\n\n.login-button:hover {\n  background-color: #2a17b1;\n}\n</style>"],"mappings":";;;EACOA,KAAK,EAAC;AAAiB;gEAC1BC,mBAAA,CAAkC;EAA9BD,KAAK,EAAC;AAAa,GAAC,OAAK;;uBAD/BE,mBAAA,CAGM,OAHNC,UAGM,GAFJC,UAAkC,EAClCH,mBAAA,CAAqF;IAA7ED,KAAK,EAAC,cAAc;IAAEK,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,cAAA,IAAAD,QAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;KAAE,yBAAuB,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}