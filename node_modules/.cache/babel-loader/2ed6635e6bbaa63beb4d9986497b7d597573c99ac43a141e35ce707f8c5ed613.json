{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: {\n        ...this.contact\n      },\n      photoFile: null,\n      errorMessage: ''\n    };\n  },\n  methods: {\n    resetData() {\n      this.editedContact = {\n        ...this.contact\n      };\n      this.photoFile = null;\n      if (this.$refs.photo) {\n        this.$refs.photo.value = '';\n      }\n      this.errorMessage = '';\n    },\n    handleFileUpload(event) {\n      this.photoFile = event.target.files[0];\n      if (this.photoFile) {\n        const formData = new FormData();\n        formData.append('photo', this.photoFile);\n        axios.post(`http://localhost:8000/api/${this.contact.id}/upload-image`, formData).then(response => {\n          this.editedContact.photo = response.data.temporaryPath;\n        }).catch(error => {\n          console.error('Erro ao fazer upload da imagem:', error);\n          this.errorMessage = 'Erro ao fazer upload da imagem.';\n        });\n      }\n    },\n    submitForm() {\n      console.log('Formulário submetido!');\n      this.errorMessage = '';\n      if (!this.editedContact.name.trim() || !this.editedContact.email.trim() || !this.editedContact.phone.trim() || !this.editedContact.address.trim()) {\n        this.errorMessage = 'Por favor, preencha todos os campos obrigatórios.';\n        return;\n      }\n      axios.put(`http://localhost:8000/api/clientes/${this.contact.id}`, this.editedContact).then(response => {\n        console.log('Contato editado com sucesso:', response.data);\n        this.showModal = false;\n        this.$emit('update', response.data);\n        this.resetData();\n      }).catch(error => {\n        this.errorMessage = 'Erro ao editar contato.';\n        console.error('Erro ao editar contato:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","contact","type","Object","required","data","showModal","editedContact","photoFile","errorMessage","methods","resetData","$refs","photo","value","handleFileUpload","event","target","files","formData","FormData","append","post","id","then","response","temporaryPath","catch","error","console","submitForm","log","trim","email","phone","address","put","$emit"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/EditContactModal.vue"],"sourcesContent":["<template>\n  <b-modal v-model=\"showModal\" title=\"Editar Contato\" @hidden=\"resetData\">\n    <form @submit.prevent=\"submitForm\">\n      <div>\n        <label for=\"name\">Nome:</label>\n        <input type=\"text\" id=\"name\" v-model=\"editedContact.name\" required>\n      </div>\n      <div>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" v-model=\"editedContact.email\" required>\n      </div>\n      <div>\n        <label for=\"celular\">Celular:</label>\n        <input type=\"text\" id=\"celular\" v-model=\"editedContact.celular\" required>\n      </div>\n      <div>\n        <label for=\"phone\">Telefone:</label>\n        <input type=\"text\" id=\"phone\" v-model=\"editedContact.phone\" required>\n      </div>\n      <div>\n        <label for=\"address\">Endereço:</label>\n        <input type=\"text\" id=\"address\" v-model=\"editedContact.address\" required>\n      </div>\n      \n      <div>\n        <label for=\"bairro\">Bairro:</label>\n        <input type=\"text\" id=\"bairro\" v-model=\"editedContact.bairro\" required>\n      </div>\n      <div>\n        <label for=\"estado\">Estado:</label>\n        <input type=\"text\" id=\"estado\" v-model=\"editedContact.estado\" required>\n      </div>\n      <div>\n        <label for=\"photo\">Foto (Upload):</label>\n        <input type=\"file\" id=\"photo\" @change=\"handleFileUpload\">\n        <!-- Mostrando a foto atual do cliente -->\n        <img v-if=\"editedContact.photo\" :src=\"editedContact.photo\" alt=\"Foto do Cliente\">\n      </div>\n      <button type=\"submit\">Salvar</button>\n    </form>\n  </b-modal>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: { ...this.contact },\n      photoFile: null,\n      errorMessage: ''\n    };\n  },\n  methods: {\n    resetData() {\n      this.editedContact = { ...this.contact };\n      this.photoFile = null;\n      if (this.$refs.photo) {\n        this.$refs.photo.value = '';\n      }\n      this.errorMessage = '';\n    },\n    handleFileUpload(event) {\n      this.photoFile = event.target.files[0];\n      if (this.photoFile) {\n        const formData = new FormData();\n        formData.append('photo', this.photoFile);\n\n        axios.post(`http://localhost:8000/api/${this.contact.id}/upload-image`, formData)\n          .then(response => {\n            this.editedContact.photo = response.data.temporaryPath;\n          })\n          .catch(error => {\n            console.error('Erro ao fazer upload da imagem:', error);\n            this.errorMessage = 'Erro ao fazer upload da imagem.';\n          });\n      }\n    },\n    submitForm() {\n      console.log('Formulário submetido!');\n      this.errorMessage = '';\n\n      if (!this.editedContact.name.trim() || !this.editedContact.email.trim() || !this.editedContact.phone.trim() || !this.editedContact.address.trim()) {\n        this.errorMessage = 'Por favor, preencha todos os campos obrigatórios.';\n        return;\n      }\n\n      axios.put(`http://localhost:8000/api/clientes/${this.contact.id}`, this.editedContact)\n        .then(response => {\n          console.log('Contato editado com sucesso:', response.data);\n          this.showModal = false;\n          this.$emit('update', response.data);\n          this.resetData();\n        })\n        .catch(error => {\n          this.errorMessage = 'Erro ao editar contato.';\n          console.error('Erro ao editar contato:', error);\n        });\n    }\n  }\n};\n</script>\n"],"mappings":"AA4CA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAE;IACLC,OAAO,EAAE;MACPC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,aAAa,EAAE;QAAE,GAAG,IAAI,CAACN;MAAQ,CAAC;MAClCO,SAAS,EAAE,IAAI;MACfC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,SAASA,CAAA,EAAG;MACV,IAAI,CAACJ,aAAY,GAAI;QAAE,GAAG,IAAI,CAACN;MAAQ,CAAC;MACxC,IAAI,CAACO,SAAQ,GAAI,IAAI;MACrB,IAAI,IAAI,CAACI,KAAK,CAACC,KAAK,EAAE;QACpB,IAAI,CAACD,KAAK,CAACC,KAAK,CAACC,KAAI,GAAI,EAAE;MAC7B;MACA,IAAI,CAACL,YAAW,GAAI,EAAE;IACxB,CAAC;IACDM,gBAAgBA,CAACC,KAAK,EAAE;MACtB,IAAI,CAACR,SAAQ,GAAIQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MACtC,IAAI,IAAI,CAACV,SAAS,EAAE;QAClB,MAAMW,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACb,SAAS,CAAC;QAExCV,KAAK,CAACwB,IAAI,CAAE,6BAA4B,IAAI,CAACrB,OAAO,CAACsB,EAAG,eAAc,EAAEJ,QAAQ,EAC7EK,IAAI,CAACC,QAAO,IAAK;UAChB,IAAI,CAAClB,aAAa,CAACM,KAAI,GAAIY,QAAQ,CAACpB,IAAI,CAACqB,aAAa;QACxD,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;UACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;UACvD,IAAI,CAACnB,YAAW,GAAI,iCAAiC;QACvD,CAAC,CAAC;MACN;IACF,CAAC;IACDqB,UAAUA,CAAA,EAAG;MACXD,OAAO,CAACE,GAAG,CAAC,uBAAuB,CAAC;MACpC,IAAI,CAACtB,YAAW,GAAI,EAAE;MAEtB,IAAI,CAAC,IAAI,CAACF,aAAa,CAACR,IAAI,CAACiC,IAAI,CAAC,KAAK,CAAC,IAAI,CAACzB,aAAa,CAAC0B,KAAK,CAACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAACzB,aAAa,CAAC2B,KAAK,CAACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAACzB,aAAa,CAAC4B,OAAO,CAACH,IAAI,CAAC,CAAC,EAAE;QACjJ,IAAI,CAACvB,YAAW,GAAI,mDAAmD;QACvE;MACF;MAEAX,KAAK,CAACsC,GAAG,CAAE,sCAAqC,IAAI,CAACnC,OAAO,CAACsB,EAAG,EAAC,EAAE,IAAI,CAAChB,aAAa,EAClFiB,IAAI,CAACC,QAAO,IAAK;QAChBI,OAAO,CAACE,GAAG,CAAC,8BAA8B,EAAEN,QAAQ,CAACpB,IAAI,CAAC;QAC1D,IAAI,CAACC,SAAQ,GAAI,KAAK;QACtB,IAAI,CAAC+B,KAAK,CAAC,QAAQ,EAAEZ,QAAQ,CAACpB,IAAI,CAAC;QACnC,IAAI,CAACM,SAAS,CAAC,CAAC;MAClB,CAAC,EACAgB,KAAK,CAACC,KAAI,IAAK;QACd,IAAI,CAACnB,YAAW,GAAI,yBAAyB;QAC7CoB,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,CAAC;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}