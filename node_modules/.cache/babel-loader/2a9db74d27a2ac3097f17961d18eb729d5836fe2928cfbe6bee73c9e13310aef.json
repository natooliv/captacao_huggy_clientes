{"ast":null,"code":"import axios from 'axios';\nimport { ValidationProvider, ValidationObserver } from 'vee-validate';\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  components: {\n    ValidationProvider,\n    ValidationObserver\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: {\n        ...this.contact\n      },\n      errorMessage: ''\n    };\n  },\n  methods: {\n    resetData() {\n      this.editedContact = {\n        ...this.contact\n      };\n      if (this.$refs.photo) {\n        this.$refs.photo.value = ''; // Limpa o campo de arquivo após o reset\n      }\n      this.errorMessage = '';\n    },\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.editedContact.photo = file;\n      }\n    },\n    submitForm() {\n      console.log('Formulário submetido!');\n      this.errorMessage = '';\n      this.$validator.validateAll().then(result => {\n        if (result) {\n          // Cria o objeto FormData para enviar os dados\n          const formData = new FormData();\n          formData.append('name', this.editedContact.name.trim());\n          formData.append('email', this.editedContact.email.trim());\n          formData.append('phone', this.editedContact.phone.trim());\n          formData.append('address', this.editedContact.address.trim());\n\n          // Adiciona a foto se um arquivo foi carregado\n          if (this.editedContact.photo instanceof File) {\n            formData.append('photo', this.editedContact.photo);\n          }\n\n          // Log para verificar os dados antes de enviar\n          for (let pair of formData.entries()) {\n            console.log(pair[0] + ': ' + pair[1]);\n          }\n\n          // Envia a requisição para atualizar o contato no backend\n          axios.patch(`http://localhost:8000/api/clientes/${this.contact.id}`, formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }).then(response => {\n            console.log('Contato editado com sucesso:', response.data);\n            this.showModal = false;\n            this.$emit('update', response.data);\n            this.resetData();\n          }).catch(error => {\n            this.errorMessage = 'Erro ao editar contato.';\n            console.error('Erro ao editar contato:', error);\n          });\n        } else {\n          this.errorMessage = 'Por favor, corrija os erros no formulário.';\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","ValidationProvider","ValidationObserver","name","props","contact","type","Object","required","components","data","showModal","editedContact","errorMessage","methods","resetData","$refs","photo","value","handleFileUpload","event","file","target","files","submitForm","console","log","$validator","validateAll","then","result","formData","FormData","append","trim","email","phone","address","File","pair","entries","patch","id","headers","response","$emit","catch","error"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/EditContactModal.vue"],"sourcesContent":["<template>\n  <b-modal v-model=\"showModal\" title=\"Editar Contato\" @hidden=\"resetData\">\n    <form @submit.prevent=\"submitForm\">\n      <div>\n        <label for=\"name\">Nome:</label>\n        <input type=\"text\" id=\"name\" v-model=\"editedContact.name\" v-validate=\"'required|max:255'\" :class=\"{ 'is-invalid': errors.has('name') }\">\n        <span v-show=\"errors.has('name')\" class=\"invalid-feedback\">{{ errors.first('name') }}</span>\n      </div>\n      <div>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" v-model=\"editedContact.email\" v-validate=\"'required|email'\" :class=\"{ 'is-invalid': errors.has('email') }\">\n        <span v-show=\"errors.has('email')\" class=\"invalid-feedback\">{{ errors.first('email') }}</span>\n      </div>\n      <div>\n        <label for=\"phone\">Telefone:</label>\n        <input type=\"text\" id=\"phone\" v-model=\"editedContact.phone\" v-validate=\"'required|max:20'\" :class=\"{ 'is-invalid': errors.has('phone') }\">\n        <span v-show=\"errors.has('phone')\" class=\"invalid-feedback\">{{ errors.first('phone') }}</span>\n      </div>\n      <div>\n        <label for=\"address\">Endereço:</label>\n        <input type=\"text\" id=\"address\" v-model=\"editedContact.address\" v-validate=\"'required|max:255'\" :class=\"{ 'is-invalid': errors.has('address') }\">\n        <span v-show=\"errors.has('address')\" class=\"invalid-feedback\">{{ errors.first('address') }}</span>\n      </div>\n      <div>\n        <label for=\"photo\">Foto (URL ou Upload):</label>\n        <input type=\"file\" id=\"photo\" ref=\"photo\" @change=\"handleFileUpload\" accept=\"image/*\">\n        <input type=\"text\" v-model=\"editedContact.photo\" placeholder=\"URL da foto (opcional)\">\n      </div>\n      <button type=\"submit\">Salvar</button>\n    </form>\n  </b-modal>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ValidationProvider, ValidationObserver } from 'vee-validate';\n\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  components: {\n    ValidationProvider,\n    ValidationObserver,\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: { ...this.contact },\n      errorMessage: ''\n    };\n  },\n  methods: {\n    resetData() {\n      this.editedContact = { ...this.contact };\n      if (this.$refs.photo) {\n        this.$refs.photo.value = '';  // Limpa o campo de arquivo após o reset\n      }\n      this.errorMessage = '';\n    },\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.editedContact.photo = file;\n      }\n    },\n    submitForm() {\n      console.log('Formulário submetido!');\n      this.errorMessage = '';\n\n      this.$validator.validateAll().then((result) => {\n        if (result) {\n          // Cria o objeto FormData para enviar os dados\n          const formData = new FormData();\n          formData.append('name', this.editedContact.name.trim());\n          formData.append('email', this.editedContact.email.trim());\n          formData.append('phone', this.editedContact.phone.trim());\n          formData.append('address', this.editedContact.address.trim());\n\n          // Adiciona a foto se um arquivo foi carregado\n          if (this.editedContact.photo instanceof File) {\n            formData.append('photo', this.editedContact.photo);\n          }\n\n          // Log para verificar os dados antes de enviar\n          for (let pair of formData.entries()) {\n            console.log(pair[0] + ': ' + pair[1]);\n          }\n\n          // Envia a requisição para atualizar o contato no backend\n          axios.patch(`http://localhost:8000/api/clientes/${this.contact.id}`, formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          })\n          .then(response => {\n            console.log('Contato editado com sucesso:', response.data);\n            this.showModal = false;\n            this.$emit('update', response.data);\n            this.resetData();\n          })\n          .catch(error => {\n            this.errorMessage = 'Erro ao editar contato.';\n            console.error('Erro ao editar contato:', error);\n          });\n        } else {\n          this.errorMessage = 'Por favor, corrija os erros no formulário.';\n        }\n      });\n    }\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}