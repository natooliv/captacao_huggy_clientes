{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: {\n        ...this.contact\n      },\n      photoFile: null,\n      errorMessage: ''\n    };\n  },\n  methods: {\n    resetData() {\n      this.editedContact = {\n        ...this.contact\n      };\n      this.photoFile = null;\n      if (this.$refs.photo) {\n        this.$refs.photo.value = ''; // Limpa o campo de arquivo após o reset\n      }\n      this.errorMessage = '';\n    },\n    handleFileUpload(event) {\n      this.photoFile = event.target.files[0];\n    },\n    async submitForm() {\n      console.log('Formulário submetido!');\n      this.errorMessage = '';\n\n      // Verifica se os campos obrigatórios estão preenchidos\n      if (!this.editedContact.name.trim() || !this.editedContact.email.trim() || !this.editedContact.phone.trim() || !this.editedContact.address.trim()) {\n        this.errorMessage = 'Por favor, preencha todos os campos obrigatórios.';\n        return; // Retorna sem enviar a requisição se algum campo obrigatório estiver vazio\n      }\n      try {\n        // Primeiro atualiza o contato sem a foto\n        const {\n          data\n        } = await axios.put(`http://localhost:8000/api/clientes/${this.contact.id}`, this.editedContact);\n\n        // Se um arquivo de foto foi selecionado, faça o upload\n        if (this.photoFile) {\n          const formData = new FormData();\n          formData.append('photo', this.photoFile);\n          await axios.post(`http://localhost:8000/api/clientes/${this.contact.id}/photo`, formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n        }\n        console.log('Contato editado com sucesso:', data);\n        this.showModal = false;\n        this.$emit('update', data);\n        this.resetData();\n      } catch (error) {\n        this.errorMessage = 'Erro ao editar contato.';\n        console.error('Erro ao editar contato:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","contact","type","Object","required","data","showModal","editedContact","photoFile","errorMessage","methods","resetData","$refs","photo","value","handleFileUpload","event","target","files","submitForm","console","log","trim","email","phone","address","put","id","formData","FormData","append","post","headers","$emit","error"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/EditContactModal.vue"],"sourcesContent":["<template>\n  <b-modal v-model=\"showModal\" title=\"Editar Contato\" @hidden=\"resetData\">\n    <form @submit.prevent=\"submitForm\">\n      <div>\n        <label for=\"name\">Nome:</label>\n        <input type=\"text\" id=\"name\" v-model=\"editedContact.name\" required>\n      </div>\n      <div>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" v-model=\"editedContact.email\" required>\n      </div>\n      <div>\n        <label for=\"phone\">Telefone:</label>\n        <input type=\"text\" id=\"phone\" v-model=\"editedContact.phone\" required>\n      </div>\n      <div>\n        <label for=\"address\">Endereço:</label>\n        <input type=\"text\" id=\"address\" v-model=\"editedContact.address\" required>\n      </div>\n      <div>\n        <label for=\"photo\">Foto (URL ou Upload):</label>\n        <input type=\"file\" id=\"photo\" @change=\"handleFileUpload\">\n        <input type=\"text\" v-model=\"editedContact.photo\" placeholder=\"Ou insira a URL da foto\">\n      </div>\n      <button type=\"submit\">Salvar</button>\n    </form>\n  </b-modal>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: { ...this.contact },\n      photoFile: null,\n      errorMessage: ''\n    };\n  },\n  methods: {\n    resetData() {\n      this.editedContact = { ...this.contact };\n      this.photoFile = null;\n      if (this.$refs.photo) {\n        this.$refs.photo.value = '';  // Limpa o campo de arquivo após o reset\n      }\n      this.errorMessage = '';\n    },\n    handleFileUpload(event) {\n      this.photoFile = event.target.files[0];\n    },\n    async submitForm() {\n      console.log('Formulário submetido!');\n      this.errorMessage = '';\n\n      // Verifica se os campos obrigatórios estão preenchidos\n      if (!this.editedContact.name.trim() || !this.editedContact.email.trim() || !this.editedContact.phone.trim() || !this.editedContact.address.trim()) {\n        this.errorMessage = 'Por favor, preencha todos os campos obrigatórios.';\n        return; // Retorna sem enviar a requisição se algum campo obrigatório estiver vazio\n      }\n\n      try {\n        // Primeiro atualiza o contato sem a foto\n        const { data } = await axios.put(`http://localhost:8000/api/clientes/${this.contact.id}`, this.editedContact);\n\n        // Se um arquivo de foto foi selecionado, faça o upload\n        if (this.photoFile) {\n          const formData = new FormData();\n          formData.append('photo', this.photoFile);\n          await axios.post(`http://localhost:8000/api/clientes/${this.contact.id}/photo`, formData, {\n            headers: { 'Content-Type': 'multipart/form-data' }\n          });\n        }\n\n        console.log('Contato editado com sucesso:', data);\n        this.showModal = false;\n        this.$emit('update', data);\n        this.resetData();\n      } catch (error) {\n        this.errorMessage = 'Erro ao editar contato.';\n        console.error('Erro ao editar contato:', error);\n      }\n    }\n  }\n};\n</script>\n"],"mappings":"AA8BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAE;IACLC,OAAO,EAAE;MACPC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,aAAa,EAAE;QAAE,GAAG,IAAI,CAACN;MAAQ,CAAC;MAClCO,SAAS,EAAE,IAAI;MACfC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,SAASA,CAAA,EAAG;MACV,IAAI,CAACJ,aAAY,GAAI;QAAE,GAAG,IAAI,CAACN;MAAQ,CAAC;MACxC,IAAI,CAACO,SAAQ,GAAI,IAAI;MACrB,IAAI,IAAI,CAACI,KAAK,CAACC,KAAK,EAAE;QACpB,IAAI,CAACD,KAAK,CAACC,KAAK,CAACC,KAAI,GAAI,EAAE,EAAG;MAChC;MACA,IAAI,CAACL,YAAW,GAAI,EAAE;IACxB,CAAC;IACDM,gBAAgBA,CAACC,KAAK,EAAE;MACtB,IAAI,CAACR,SAAQ,GAAIQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACxC,CAAC;IACD,MAAMC,UAAUA,CAAA,EAAG;MACjBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,IAAI,CAACZ,YAAW,GAAI,EAAE;;MAEtB;MACA,IAAI,CAAC,IAAI,CAACF,aAAa,CAACR,IAAI,CAACuB,IAAI,CAAC,KAAK,CAAC,IAAI,CAACf,aAAa,CAACgB,KAAK,CAACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAACf,aAAa,CAACiB,KAAK,CAACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAACf,aAAa,CAACkB,OAAO,CAACH,IAAI,CAAC,CAAC,EAAE;QACjJ,IAAI,CAACb,YAAW,GAAI,mDAAmD;QACvE,OAAM,CAAE;MACV;MAEA,IAAI;QACF;QACA,MAAM;UAAEJ;QAAK,IAAI,MAAMP,KAAK,CAAC4B,GAAG,CAAE,sCAAqC,IAAI,CAACzB,OAAO,CAAC0B,EAAG,EAAC,EAAE,IAAI,CAACpB,aAAa,CAAC;;QAE7G;QACA,IAAI,IAAI,CAACC,SAAS,EAAE;UAClB,MAAMoB,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;UAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACtB,SAAS,CAAC;UACxC,MAAMV,KAAK,CAACiC,IAAI,CAAE,sCAAqC,IAAI,CAAC9B,OAAO,CAAC0B,EAAG,QAAO,EAAEC,QAAQ,EAAE;YACxFI,OAAO,EAAE;cAAE,cAAc,EAAE;YAAsB;UACnD,CAAC,CAAC;QACJ;QAEAZ,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEhB,IAAI,CAAC;QACjD,IAAI,CAACC,SAAQ,GAAI,KAAK;QACtB,IAAI,CAAC2B,KAAK,CAAC,QAAQ,EAAE5B,IAAI,CAAC;QAC1B,IAAI,CAACM,SAAS,CAAC,CAAC;MAClB,EAAE,OAAOuB,KAAK,EAAE;QACd,IAAI,CAACzB,YAAW,GAAI,yBAAyB;QAC7CW,OAAO,CAACc,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}