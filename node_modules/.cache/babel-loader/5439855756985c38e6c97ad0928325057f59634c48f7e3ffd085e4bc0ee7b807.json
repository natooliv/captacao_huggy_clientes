{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: {\n        ...this.contact\n      },\n      errorMessage: ''\n    };\n  },\n  methods: {\n    resetData() {\n      this.editedContact = {\n        ...this.contact\n      };\n      if (this.$refs.photo) {\n        this.$refs.photo.value = ''; // Limpa o campo de arquivo após o reset\n      }\n      this.errorMessage = '';\n    },\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.editedContact.photo = file;\n      }\n    },\n    submitForm() {\n      console.log('Formulário submetido!');\n      this.errorMessage = '';\n\n      // Verifica se os campos obrigatórios estão preenchidos\n      if (!this.editedContact.name || !this.editedContact.email || !this.editedContact.phone || !this.editedContact.address) {\n        this.errorMessage = 'Por favor, preencha todos os campos obrigatórios.';\n        return; // Retorna sem enviar a requisição se algum campo obrigatório estiver vazio\n      }\n\n      // Cria o objeto FormData para enviar os dados\n      const formData = new FormData();\n      Object.keys(this.editedContact).forEach(key => {\n        if (key === 'photo' && this.$refs.photo && this.$refs.photo.files.length > 0) {\n          // Adiciona a foto se um arquivo foi carregado\n          formData.append(key, this.$refs.photo.files[0]);\n        } else {\n          // Adiciona outros dados do contato\n          formData.append(key, this.editedContact[key]);\n        }\n      });\n\n      // Envia a requisição para atualizar o contato no backend\n      axios.put(`http://localhost:8000/api/clientes/${this.contact.id}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(response => {\n        console.log('Contato editado com sucesso:', response.data);\n        this.showModal = false;\n        this.$emit('update', response.data);\n        this.resetData();\n      }).catch(error => {\n        this.errorMessage = 'Erro ao editar contato.';\n        console.error('Erro ao editar contato:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","contact","type","Object","required","data","showModal","editedContact","errorMessage","methods","resetData","$refs","photo","value","handleFileUpload","event","file","target","files","submitForm","console","log","email","phone","address","formData","FormData","keys","forEach","key","length","append","put","id","headers","then","response","$emit","catch","error"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/EditContactModal.vue"],"sourcesContent":["<template>\n  <b-modal v-model=\"showModal\" title=\"Editar Contato\" @hidden=\"resetData\">\n    <form @submit.prevent=\"submitForm\">\n      <div>\n        <label for=\"name\">Nome:</label>\n        <input type=\"text\" id=\"name\" v-model=\"editedContact.name\" required>\n      </div>\n      <div>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" v-model=\"editedContact.email\" required>\n      </div>\n      <div>\n        <label for=\"phone\">Telefone:</label>\n        <input type=\"text\" id=\"phone\" v-model=\"editedContact.phone\" required>\n      </div>\n      <div>\n        <label for=\"address\">Endereço:</label>\n        <input type=\"text\" id=\"address\" v-model=\"editedContact.address\" required>\n      </div>\n      <div>\n        <label for=\"photo\">Foto (URL ou Upload):</label>\n        <input type=\"file\" id=\"photo\" ref=\"photo\" @change=\"handleFileUpload\" accept=\"image/*\">\n        <input type=\"text\" v-model=\"editedContact.photo\" placeholder=\"URL da foto (opcional)\">\n      </div>\n      <button type=\"submit\">Salvar</button>\n    </form>\n  </b-modal>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: { ...this.contact },\n      errorMessage: ''\n    };\n  },\n  methods: {\n    resetData() {\n      this.editedContact = { ...this.contact };\n      if (this.$refs.photo) {\n        this.$refs.photo.value = '';  // Limpa o campo de arquivo após o reset\n      }\n      this.errorMessage = '';\n    },\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.editedContact.photo = file;\n      }\n    },\n    submitForm() {\n  console.log('Formulário submetido!');\n  this.errorMessage = '';\n\n  // Verifica se os campos obrigatórios estão preenchidos\n  if (!this.editedContact.name || !this.editedContact.email || !this.editedContact.phone || !this.editedContact.address) {\n    this.errorMessage = 'Por favor, preencha todos os campos obrigatórios.';\n    return; // Retorna sem enviar a requisição se algum campo obrigatório estiver vazio\n  }\n\n  // Cria o objeto FormData para enviar os dados\n  const formData = new FormData();\n  Object.keys(this.editedContact).forEach(key => {\n    if (key === 'photo' && this.$refs.photo && this.$refs.photo.files.length > 0) {\n      // Adiciona a foto se um arquivo foi carregado\n      formData.append(key, this.$refs.photo.files[0]);\n    } else {\n      // Adiciona outros dados do contato\n      formData.append(key, this.editedContact[key]);\n    }\n  });\n\n  // Envia a requisição para atualizar o contato no backend\n  axios.put(`http://localhost:8000/api/clientes/${this.contact.id}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  })\n  .then(response => {\n    console.log('Contato editado com sucesso:', response.data);\n    this.showModal = false;\n    this.$emit('update', response.data);\n    this.resetData();\n  })\n  .catch(error => {\n    this.errorMessage = 'Erro ao editar contato.';\n    console.error('Erro ao editar contato:', error);\n  });\n}\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}