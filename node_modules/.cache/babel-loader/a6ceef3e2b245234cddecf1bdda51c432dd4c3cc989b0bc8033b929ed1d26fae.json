{"ast":null,"code":"// Importe o Axios aqui\nimport axios from 'axios';\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: {\n        name: '',\n        address: '',\n        email: '',\n        phone: '',\n        photo: ''\n      }\n    };\n  },\n  watch: {\n    contact: {\n      handler(newVal) {\n        this.editedContact = {\n          ...newVal\n        };\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    resetData() {\n      this.editedContact = {\n        ...this.contact\n      };\n    },\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.editedContact.photo = file;\n      }\n    },\n    submitForm() {\n      // Verifique se os campos obrigatórios estão preenchidos\n      if (!this.editedContact.name || !this.editedContact.email || !this.editedContact.phone || !this.editedContact.address) {\n        console.error('Todos os campos obrigatórios devem ser preenchidos.');\n        return;\n      }\n      const formData = new FormData();\n\n      // Verifique se o nome foi alterado e não está em branco\n      if (this.editedContact.name !== this.contact.name) {\n        formData.append('name', this.editedContact.name);\n      }\n\n      // Verifique se o email foi alterado e não está em branco\n      if (this.editedContact.email !== this.contact.email) {\n        formData.append('email', this.editedContact.email);\n      }\n\n      // Verifique se o telefone foi alterado e não está em branco\n      if (this.editedContact.phone !== this.contact.phone) {\n        formData.append('phone', this.editedContact.phone);\n      }\n\n      // Verifique se o endereço foi alterado e não está em branco\n      if (this.editedContact.address !== this.contact.address) {\n        formData.append('address', this.editedContact.address);\n      }\n\n      // Verifique se a foto foi alterada (se for um arquivo)\n      if (this.editedContact.photo instanceof File) {\n        formData.append('photo', this.editedContact.photo);\n      }\n\n      // Verifique se a foto foi alterada (se for uma URL diferente) e não está em branco\n      if (this.editedContact.photo && this.editedContact.photo !== this.contact.photo && !(this.editedContact.photo instanceof File) && this.editedContact.photo.trim() !== '') {\n        formData.append('photo', this.editedContact.photo);\n      }\n\n      // Verifique se algum campo foi modificado\n      if (formData.has('name') || formData.has('email') || formData.has('phone') || formData.has('address') || formData.has('photo')) {\n        axios.put('http://localhost:8000/api/clientes/' + this.contact.id, formData).then(response => {\n          // Lógica de sucesso\n          console.log('Contato editado com sucesso:', response.data);\n          // Fechar o modal após a edição ser concluída\n          this.showModal = false;\n          // Emitir evento de atualização para o componente pai\n          this.$emit('update', response.data);\n        }).catch(error => {\n          // Lógica de erro\n          console.error('Erro ao editar contato:', error);\n        });\n      } else {\n        // Nenhum campo foi modificado ou campos obrigatórios estão em branco\n        console.warn('Nenhum campo foi modificado ou campos obrigatórios estão em branco.');\n        // Fechar o modal sem enviar a solicitação\n        this.showModal = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","contact","type","Object","required","data","showModal","editedContact","address","email","phone","photo","watch","handler","newVal","immediate","methods","resetData","handleFileUpload","event","file","target","files","submitForm","console","error","formData","FormData","append","File","trim","has","put","id","then","response","log","$emit","catch","warn"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/EditContactModal.vue"],"sourcesContent":["<template>\n  <b-modal v-model=\"showModal\" title=\"Editar Contato\" @hidden=\"resetData\">\n    <form @submit.prevent=\"submitForm\">\n      <div>\n        <label for=\"name\">Nome:</label>\n        <input type=\"text\" id=\"name\" v-model=\"editedContact.name\" required>\n      </div>\n      <div>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" v-model=\"editedContact.email\" required>\n      </div>\n      <div>\n        <label for=\"phone\">Telefone:</label>\n        <input type=\"text\" id=\"phone\" v-model=\"editedContact.phone\" required>\n      </div>\n      <div>\n        <label for=\"photo\">Foto (URL ou Upload):</label>\n        <input type=\"file\" id=\"photo\" ref=\"photo\" @change=\"handleFileUpload\" accept=\"image/*\">\n        <input type=\"text\" v-model=\"editedContact.photo\" placeholder=\"URL da foto (opcional)\">\n      </div>\n      <div>\n        <label for=\"address\">Endereço:</label>\n        <input type=\"text\" id=\"address\" v-model=\"editedContact.address\">\n      </div>\n      <button type=\"submit\">Salvar</button>\n    </form>\n  </b-modal>\n</template>\n\n<script>\n// Importe o Axios aqui\nimport axios from 'axios';\n\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: {\n        name: '',\n        address: '',\n        email: '',\n        phone: '',\n        photo: ''\n      }\n    };\n  },\n  watch: {\n    contact: {\n      handler(newVal) {\n        this.editedContact = { ...newVal };\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    resetData() {\n      this.editedContact = { ...this.contact };\n    },\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.editedContact.photo = file;\n      }\n    },\n    submitForm() {\n      // Verifique se os campos obrigatórios estão preenchidos\n      if (!this.editedContact.name || !this.editedContact.email || !this.editedContact.phone || !this.editedContact.address) {\n        console.error('Todos os campos obrigatórios devem ser preenchidos.');\n        return;\n      }\n\n      const formData = new FormData();\n\n      // Verifique se o nome foi alterado e não está em branco\n      if (this.editedContact.name !== this.contact.name) {\n        formData.append('name', this.editedContact.name);\n      }\n\n      // Verifique se o email foi alterado e não está em branco\n      if (this.editedContact.email !== this.contact.email) {\n        formData.append('email', this.editedContact.email);\n      }\n\n      // Verifique se o telefone foi alterado e não está em branco\n      if (this.editedContact.phone !== this.contact.phone) {\n        formData.append('phone', this.editedContact.phone);\n      }\n\n      // Verifique se o endereço foi alterado e não está em branco\n      if (this.editedContact.address !== this.contact.address) {\n        formData.append('address', this.editedContact.address);\n      }\n\n      // Verifique se a foto foi alterada (se for um arquivo)\n      if (this.editedContact.photo instanceof File) {\n        formData.append('photo', this.editedContact.photo);\n      }\n\n      // Verifique se a foto foi alterada (se for uma URL diferente) e não está em branco\n      if (\n        this.editedContact.photo &&\n        this.editedContact.photo !== this.contact.photo &&\n        !(this.editedContact.photo instanceof File) &&\n        this.editedContact.photo.trim() !== ''\n      ) {\n        formData.append('photo', this.editedContact.photo);\n      }\n\n      // Verifique se algum campo foi modificado\n      if (formData.has('name') || formData.has('email') || formData.has('phone') || formData.has('address') || formData.has('photo')) {\n        axios.put('http://localhost:8000/api/clientes/' + this.contact.id, formData)\n          .then(response => {\n            // Lógica de sucesso\n            console.log('Contato editado com sucesso:', response.data);\n            // Fechar o modal após a edição ser concluída\n            this.showModal = false;\n            // Emitir evento de atualização para o componente pai\n            this.$emit('update', response.data);\n          })\n          .catch(error => {\n            // Lógica de erro\n            console.error('Erro ao editar contato:', error);\n          });\n      } else {\n        // Nenhum campo foi modificado ou campos obrigatórios estão em branco\n        console.warn('Nenhum campo foi modificado ou campos obrigatórios estão em branco.');\n        // Fechar o modal sem enviar a solicitação\n        this.showModal = false;\n      }\n    }\n  }\n};\n</script>\n\n<style>\n/* Estilos para EditContactModal */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}