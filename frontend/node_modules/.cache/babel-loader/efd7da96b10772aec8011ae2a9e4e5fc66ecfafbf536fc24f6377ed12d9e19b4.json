{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-002fd7de\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Nome\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Email\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Telefone\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Foto\"), /*#__PURE__*/_createCommentVNode(\" Adicionei a coluna para exibir a foto \")])], -1 /* HOISTED */));\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_EditContactModal = _resolveComponent(\"EditContactModal\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" Tabela de contatos \"), $data.contacts.length > 0 ? (_openBlock(), _createElementBlock(\"table\", _hoisted_1, [_hoisted_2, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.contacts, contact => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: contact.id,\n      onClick: $event => $options.openEditModal(contact)\n    }, [_createElementVNode(\"td\", null, _toDisplayString(contact.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(contact.email), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(contact.phone), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(contact.photo), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Modal de edição \"), $data.selectedContact ? (_openBlock(), _createBlock(_component_EditContactModal, {\n    key: 1,\n    contact: $data.selectedContact,\n    onUpdate: $options.handleContactUpdate\n  }, null, 8 /* PROPS */, [\"contact\", \"onUpdate\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementVNode","_createCommentVNode","_createElementBlock","$data","contacts","length","_hoisted_1","_hoisted_2","_Fragment","_renderList","contact","id","onClick","$event","$options","openEditModal","_toDisplayString","name","email","phone","photo","_hoisted_3","selectedContact","_createBlock","_component_EditContactModal","onUpdate","handleContactUpdate"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/ContactList.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Tabela de contatos -->\n    <table v-if=\"contacts.length > 0\">\n      <thead>\n        <tr>\n          <th>Nome</th>\n          <th>Email</th>\n          <th>Telefone</th>\n          <th>Foto</th> <!-- Adicionei a coluna para exibir a foto -->\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"contact in contacts\" :key=\"contact.id\" @click=\"openEditModal(contact)\">\n          <td>{{ contact.name }}</td>\n          <td>{{ contact.email }}</td>\n          <td>{{ contact.phone }}</td>\n          <td>{{ contact.photo }}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <!-- Modal de edição -->\n    <EditContactModal v-if=\"selectedContact\" :contact=\"selectedContact\" @update=\"handleContactUpdate\" />\n  </div>\n</template>\n\n<script>\nimport EditContactModal from './EditContactModal.vue';\n\nexport default {\n  name: 'ContactList',\n  components: {\n    EditContactModal,\n  },\n  data() {\n    return {\n      contacts: [], // seus contatos\n      selectedContact: null, // contato selecionado para edição\n    };\n  },\n  methods: {\n    openEditModal(contact) {\n      this.selectedContact = contact;\n    },\n    handleContactUpdate(updatedContact) {\n      // Atualizar o contato na lista após a edição\n      const index = this.contacts.findIndex(c => c.id === updatedContact.id);\n      if (index !== -1) {\n        this.contacts.splice(index, 1, updatedContact);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Estilos para ContactList */\n</style>\n"],"mappings":";;;EAAAA,GAAA;AAAA;gEAIMC,mBAAA,CAOQ,gB,aANNA,mBAAA,CAKK,a,aAJHA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAAc,YAAV,OAAK,G,aACTA,mBAAA,CAAiB,YAAb,UAAQ,G,aACZA,mBAAA,CAAa,YAAT,MAAI,G,aAAMC,mBAAA,2CAA8C,C;mBATtE;;;uBACEC,mBAAA,CAuBM,cAtBJD,mBAAA,wBAA2B,EACdE,KAAA,CAAAC,QAAQ,CAACC,MAAM,Q,cAA5BH,mBAAA,CAiBQ,SApBZI,UAAA,GAIMC,UAOQ,EACRP,mBAAA,CAOQ,iB,kBANNE,mBAAA,CAKKM,SAAA,QAlBbC,WAAA,CAa8BN,KAAA,CAAAC,QAAQ,EAAnBM,OAAO;yBAAlBR,mBAAA,CAKK;MAL4BH,GAAG,EAAEW,OAAO,CAACC,EAAE;MAAGC,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,aAAa,CAACL,OAAO;QAC7EV,mBAAA,CAA2B,YAAAgB,gBAAA,CAApBN,OAAO,CAACO,IAAI,kBACnBjB,mBAAA,CAA4B,YAAAgB,gBAAA,CAArBN,OAAO,CAACQ,KAAK,kBACpBlB,mBAAA,CAA4B,YAAAgB,gBAAA,CAArBN,OAAO,CAACS,KAAK,kBACpBnB,mBAAA,CAA4B,YAAAgB,gBAAA,CAArBN,OAAO,CAACU,KAAK,iB,iBAjB9BC,UAAA;wCAAApB,mBAAA,gBAsBIA,mBAAA,qBAAwB,EACAE,KAAA,CAAAmB,eAAe,I,cAAvCC,YAAA,CAAoGC,2BAAA;IAvBxGzB,GAAA;IAuB8CW,OAAO,EAAEP,KAAA,CAAAmB,eAAe;IAAGG,QAAM,EAAEX,QAAA,CAAAY;sDAvBjFzB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}