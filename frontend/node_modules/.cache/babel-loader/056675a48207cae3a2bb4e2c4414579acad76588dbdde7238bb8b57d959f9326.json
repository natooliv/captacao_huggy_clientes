{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'ContactList',\n  data() {\n    return {\n      searchQuery: '',\n      contacts: []\n    };\n  },\n  computed: {\n    filteredContacts() {\n      if (Array.isArray(this.contacts)) {\n        return this.contacts.filter(contact => contact.name.toLowerCase().includes(this.searchQuery.toLowerCase()));\n      } else {\n        return [];\n      }\n    }\n  },\n  mounted() {\n    this.fetchContacts();\n  },\n  methods: {\n    fetchContacts() {\n      axios.get('https://a425-2804-1b3-6901-129e-227d-7911-fd53-1a16.ngrok-free.app/api/clientes').then(response => {\n        if (Array.isArray(response.data)) {\n          this.contacts = response.data;\n        } else {\n          console.error('A resposta da API não é um array:', response.data);\n          this.contacts = [];\n        }\n      }).catch(error => {\n        console.error('Ocorreu um erro ao buscar os clientes:', error);\n        this.contacts = [];\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","searchQuery","contacts","computed","filteredContacts","Array","isArray","filter","contact","toLowerCase","includes","mounted","fetchContacts","methods","get","then","response","console","error","catch"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/ContactList.vue"],"sourcesContent":["<template>\n  <div>\n    <input type=\"search\" placeholder=\"Buscar contato\" v-model=\"searchQuery\">\n    <!-- Tabela de contatos -->\n    <table>\n      <thead>\n        <tr>\n          <th>Nome</th>\n          <th>Email</th>\n          <th>Telefone</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"contact in filteredContacts\" :key=\"contact.id\">\n          <td>{{ contact.name }}</td>\n          <td>{{ contact.email }}</td>\n          <td>{{ contact.phone }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'ContactList',\n  data() {\n    return {\n      searchQuery: '',\n      contacts: []\n    };\n  },\n  computed: {\n    filteredContacts() {\n      if (Array.isArray(this.contacts)) {\n        return this.contacts.filter(contact =>\n          contact.name.toLowerCase().includes(this.searchQuery.toLowerCase())\n        );\n      } else {\n        return [];\n      }\n    }\n  },\n  mounted() {\n    this.fetchContacts();\n  },\n  methods: {\n    fetchContacts() {\n      axios.get('https://a425-2804-1b3-6901-129e-227d-7911-fd53-1a16.ngrok-free.app/api/clientes')\n        .then(response => {\n          if (Array.isArray(response.data)) {\n            this.contacts = response.data;\n          } else {\n            console.error('A resposta da API não é um array:', response.data);\n            this.contacts = [];\n          }\n        })\n        .catch(error => {\n          console.error('Ocorreu um erro ao buscar os clientes:', error);\n          this.contacts = [];\n        });\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* Estilos para ContactList */\n</style>\n"],"mappings":"AAwBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,gBAAgBA,CAAA,EAAG;MACjB,IAAIC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACJ,QAAQ,CAAC,EAAE;QAChC,OAAO,IAAI,CAACA,QAAQ,CAACK,MAAM,CAACC,OAAM,IAChCA,OAAO,CAACT,IAAI,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACT,WAAW,CAACQ,WAAW,CAAC,CAAC,CACpE,CAAC;MACH,OAAO;QACL,OAAO,EAAE;MACX;IACF;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACPD,aAAaA,CAAA,EAAG;MACdd,KAAK,CAACgB,GAAG,CAAC,iFAAiF,EACxFC,IAAI,CAACC,QAAO,IAAK;QAChB,IAAIX,KAAK,CAACC,OAAO,CAACU,QAAQ,CAAChB,IAAI,CAAC,EAAE;UAChC,IAAI,CAACE,QAAO,GAAIc,QAAQ,CAAChB,IAAI;QAC/B,OAAO;UACLiB,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEF,QAAQ,CAAChB,IAAI,CAAC;UACjE,IAAI,CAACE,QAAO,GAAI,EAAE;QACpB;MACF,CAAC,EACAiB,KAAK,CAACD,KAAI,IAAK;QACdD,OAAO,CAACC,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9D,IAAI,CAAChB,QAAO,GAAI,EAAE;MACpB,CAAC,CAAC;IACN;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}