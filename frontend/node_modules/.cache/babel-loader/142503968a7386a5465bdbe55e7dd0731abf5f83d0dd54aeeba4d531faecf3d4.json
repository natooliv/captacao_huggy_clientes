{"ast":null,"code":"import axios from 'axios';\nimport EditContactModal from './EditContactModal'; // Importe o componente de modal de edição\n\nexport default {\n  name: 'ContactList',\n  components: {\n    EditContactModal\n  },\n  data() {\n    return {\n      searchQuery: '',\n      contacts: [],\n      selectedContact: null // Contato selecionado para edição\n    };\n  },\n  computed: {\n    filteredContacts() {\n      return this.contacts.filter(contact => contact.name.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    }\n  },\n  mounted() {\n    this.fetchContacts();\n  },\n  methods: {\n    fetchContacts() {\n      axios.get('http://localhost:8000/api/clientes').then(response => {\n        console.log('Resposta da API ao buscar clientes:', response.data);\n        if (Array.isArray(response.data)) {\n          this.contacts = response.data;\n        } else {\n          console.error('A resposta da API não é um array:', response.data);\n          this.contacts = [];\n        }\n      }).catch(error => {\n        console.error('Ocorreu um erro ao buscar os clientes:', error);\n        this.contacts = [];\n      });\n    },\n    openEditModal(contact) {\n      this.selectedContact = contact; // Define o contato selecionado para edição\n    },\n    updateContact(updatedContact) {\n      // Atualiza o contato na lista após a edição\n      const index = this.contacts.findIndex(contact => contact.id === updatedContact.id);\n      if (index !== -1) {\n        this.contacts.splice(index, 1, updatedContact);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","EditContactModal","name","components","data","searchQuery","contacts","selectedContact","computed","filteredContacts","filter","contact","toLowerCase","includes","mounted","fetchContacts","methods","get","then","response","console","log","Array","isArray","error","catch","openEditModal","updateContact","updatedContact","index","findIndex","id","splice"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/ContactList.vue"],"sourcesContent":["<template>\n  <div>\n    <input type=\"search\" placeholder=\"Buscar contato\" v-model=\"searchQuery\">\n    <!-- Tabela de contatos -->\n    <table v-if=\"searchQuery.length > 0\">\n      <thead>\n        <tr>\n          <th>Nome</th>\n          <th>Email</th>\n          <th>Telefone</th>\n          <th>Ações</th> <!-- Adicionei a coluna para as ações -->\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"contact in filteredContacts\" :key=\"contact.id\">\n          <td>{{ contact.name }}</td>\n          <td>{{ contact.email }}</td>\n          <td>{{ contact.phone }}</td>\n          <td>\n            <button @click=\"openEditModal(contact)\">Editar</button> <!-- Botão para abrir o modal de edição -->\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <!-- Modal de edição -->\n    <EditContactModal :contact=\"selectedContact\" @update=\"updateContact\" />\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport EditContactModal from './EditContactModal'; // Importe o componente de modal de edição\n\nexport default {\n  name: 'ContactList',\n  components: {\n    EditContactModal,\n  },\n  data() {\n    return {\n      searchQuery: '',\n      contacts: [],\n      selectedContact: null, // Contato selecionado para edição\n    };\n  },\n  computed: {\n    filteredContacts() {\n      return this.contacts.filter(contact =>\n        contact.name.toLowerCase().includes(this.searchQuery.toLowerCase())\n      );\n    },\n  },\n  mounted() {\n    this.fetchContacts();\n  },\n  methods: {\n    fetchContacts() {\n      axios.get('http://localhost:8000/api/clientes')\n        .then(response => {\n          console.log('Resposta da API ao buscar clientes:', response.data);\n          if (Array.isArray(response.data)) {\n            this.contacts = response.data;\n          } else {\n            console.error('A resposta da API não é um array:', response.data);\n            this.contacts = [];\n          }\n        })\n        .catch(error => {\n          console.error('Ocorreu um erro ao buscar os clientes:', error);\n          this.contacts = [];\n        });\n    },\n    openEditModal(contact) {\n      this.selectedContact = contact; // Define o contato selecionado para edição\n    },\n    updateContact(updatedContact) {\n      // Atualiza o contato na lista após a edição\n      const index = this.contacts.findIndex(contact => contact.id === updatedContact.id);\n      if (index !== -1) {\n        this.contacts.splice(index, 1, updatedContact);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Estilos para ContactList */\n</style>\n"],"mappings":"AA8BA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,gBAAe,MAAO,oBAAoB,EAAE;;AAEnD,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,IAAI,CAAE;IACzB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,gBAAgBA,CAAA,EAAG;MACjB,OAAO,IAAI,CAACH,QAAQ,CAACI,MAAM,CAACC,OAAM,IAChCA,OAAO,CAACT,IAAI,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACR,WAAW,CAACO,WAAW,CAAC,CAAC,CACpE,CAAC;IACH;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACPD,aAAaA,CAAA,EAAG;MACdf,KAAK,CAACiB,GAAG,CAAC,oCAAoC,EAC3CC,IAAI,CAACC,QAAO,IAAK;QAChBC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEF,QAAQ,CAACf,IAAI,CAAC;QACjE,IAAIkB,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACf,IAAI,CAAC,EAAE;UAChC,IAAI,CAACE,QAAO,GAAIa,QAAQ,CAACf,IAAI;QAC/B,OAAO;UACLgB,OAAO,CAACI,KAAK,CAAC,mCAAmC,EAAEL,QAAQ,CAACf,IAAI,CAAC;UACjE,IAAI,CAACE,QAAO,GAAI,EAAE;QACpB;MACF,CAAC,EACAmB,KAAK,CAACD,KAAI,IAAK;QACdJ,OAAO,CAACI,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9D,IAAI,CAAClB,QAAO,GAAI,EAAE;MACpB,CAAC,CAAC;IACN,CAAC;IACDoB,aAAaA,CAACf,OAAO,EAAE;MACrB,IAAI,CAACJ,eAAc,GAAII,OAAO,EAAE;IAClC,CAAC;IACDgB,aAAaA,CAACC,cAAc,EAAE;MAC5B;MACA,MAAMC,KAAI,GAAI,IAAI,CAACvB,QAAQ,CAACwB,SAAS,CAACnB,OAAM,IAAKA,OAAO,CAACoB,EAAC,KAAMH,cAAc,CAACG,EAAE,CAAC;MAClF,IAAIF,KAAI,KAAM,CAAC,CAAC,EAAE;QAChB,IAAI,CAACvB,QAAQ,CAAC0B,MAAM,CAACH,KAAK,EAAE,CAAC,EAAED,cAAc,CAAC;MAChD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}