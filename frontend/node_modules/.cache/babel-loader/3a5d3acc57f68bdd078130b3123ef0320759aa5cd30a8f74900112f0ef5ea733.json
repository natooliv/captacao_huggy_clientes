{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, normalizeClass as _normalizeClass, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, withModifiers as _withModifiers, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"name\"\n}, \"Nome:\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0,\n  class: \"invalid-feedback\"\n};\nconst _hoisted_3 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ValidationProvider = _resolveComponent(\"ValidationProvider\");\n  const _component_ValidationObserver = _resolveComponent(\"ValidationObserver\");\n  const _component_b_modal = _resolveComponent(\"b-modal\");\n  return _openBlock(), _createBlock(_component_b_modal, {\n    modelValue: $data.showModal,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.showModal = $event),\n    title: \"Editar Contato\",\n    onHidden: $options.resetData\n  }, {\n    default: _withCtx(() => [_createVNode(_component_ValidationObserver, {\n      ref: \"formObserver\"\n    }, {\n      default: _withCtx(validation => [_createElementVNode(\"form\", {\n        onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n      }, [_createElementVNode(\"div\", null, [_hoisted_1, _createVNode(_component_ValidationProvider, {\n        rules: \"required|max:255\",\n        name: \"name\"\n      }, {\n        default: _withCtx(field => [_withDirectives(_createElementVNode(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.editedContact.name = $event),\n          class: _normalizeClass({\n            'is-invalid': field && field.errors && field.errors.length > 0\n          })\n        }, null, 2 /* CLASS */), [[_vModelText, $data.editedContact.name]]), field && field.errors && field.errors.length > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, _toDisplayString(field.errors[0]), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]),\n        _: 1 /* STABLE */\n      })]), _createCommentVNode(\" Adicione outros campos de entrada com validação semelhante \"), _createElementVNode(\"button\", {\n        type: \"submit\",\n        disabled: validation ? validation.invalid : true\n      }, \"Salvar\", 8 /* PROPS */, _hoisted_3)], 32 /* NEED_HYDRATION */)]),\n      _: 1 /* STABLE */\n    }, 512 /* NEED_PATCH */)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"onHidden\"]);\n}","map":{"version":3,"names":["_createElementVNode","for","key","class","_createBlock","_component_b_modal","modelValue","$data","showModal","_cache","$event","title","onHidden","$options","resetData","default","_withCtx","_createVNode","_component_ValidationObserver","ref","validation","onSubmit","_withModifiers","args","submitForm","_hoisted_1","_component_ValidationProvider","rules","name","field","type","id","editedContact","_normalizeClass","errors","length","_createElementBlock","_hoisted_2","_toDisplayString","_createCommentVNode","_","disabled","invalid","_hoisted_3"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/EditContactModal.vue"],"sourcesContent":["<template>\n  <b-modal v-model=\"showModal\" title=\"Editar Contato\" @hidden=\"resetData\">\n    <ValidationObserver v-slot=\"validation\" ref=\"formObserver\">\n      <form @submit.prevent=\"submitForm\">\n        <div>\n          <label for=\"name\">Nome:</label>\n          <ValidationProvider rules=\"required|max:255\" v-slot=\"field\" name=\"name\">\n            <input type=\"text\" id=\"name\" v-model=\"editedContact.name\" :class=\"{ 'is-invalid': field && field.errors && field.errors.length > 0 }\">\n            <span v-if=\"field && field.errors && field.errors.length > 0\" class=\"invalid-feedback\">{{ field.errors[0] }}</span>\n          </ValidationProvider>\n        </div>\n        <!-- Adicione outros campos de entrada com validação semelhante -->\n\n        <button type=\"submit\" :disabled=\"validation ? validation.invalid : true\">Salvar</button>\n      </form>\n    </ValidationObserver>\n  </b-modal>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ValidationObserver, ValidationProvider } from 'vee-validate';\n\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  components: {\n    ValidationObserver,\n    ValidationProvider,\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: { ...this.contact },\n      errorMessage: '',\n    };\n  },\n  methods: {\n    resetData() {\n      this.editedContact = { ...this.contact };\n      if (this.$refs.formObserver) {\n        this.$refs.formObserver.reset(); // Resetar o estado da validação\n      }\n      this.errorMessage = '';\n    },\n    submitForm() {\n      this.errorMessage = ''; // Limpar mensagens de erro anteriores\n\n      if (this.$refs.formObserver) {\n        this.$refs.formObserver.validate().then(valid => {\n          if (valid) {\n            // Cria o objeto FormData para enviar os dados\n            const formData = new FormData();\n            formData.append('name', this.editedContact.name.trim());\n            // Adicione outros campos de entrada ao formData conforme necessário\n\n            // Envia a requisição para atualizar o contato no backend\n            axios.patch(`http://localhost:8000/api/clientes/${this.contact.id}`, formData, {\n              headers: {\n                'Content-Type': 'multipart/form-data'\n              }\n            })\n            .then(response => {\n              console.log('Contato editado com sucesso:', response.data);\n              this.showModal = false;\n              this.$emit('update', response.data);\n              this.resetData();\n            })\n            .catch(error => {\n              this.errorMessage = 'Erro ao editar contato.';\n              console.error('Erro ao editar contato:', error);\n            });\n          } else {\n            this.errorMessage = 'Por favor, corrija os erros no formulário.';\n          }\n        });\n      }\n    }\n  }\n};\n</script>\n\n<style>\n.is-invalid {\n  border-color: red; /* Estilo para indicar campos inválidos */\n}\n.invalid-feedback {\n  color: red; /* Cor para mensagens de erro */\n}\n</style>\n"],"mappings":";gCAKUA,mBAAA,CAA+B;EAAxBC,GAAG,EAAC;AAAM,GAAC,OAAK;;EALjCC,GAAA;EAQ0EC,KAAK,EAAC;;mBARhF;;;;;uBACEC,YAAA,CAeUC,kBAAA;IAhBZC,UAAA,EACoBC,KAAA,CAAAC,SAAS;IAD7B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IACoBH,KAAA,CAAAC,SAAS,GAAAE,MAAA;IAAEC,KAAK,EAAC,gBAAgB;IAAEC,QAAM,EAAEC,QAAA,CAAAC;;IAD/DC,OAAA,EAAAC,QAAA,CAEI,MAaqB,CAbrBC,YAAA,CAaqBC,6BAAA;MAbmBC,GAAG,EAAC;IAAc;MAF9DJ,OAAA,EAAAC,QAAA,CAcaI,UAZ6B,KACpCpB,mBAAA,CAWO;QAXAqB,QAAM,EAAAZ,MAAA,QAAAA,MAAA,MAHnBa,cAAA,KAAAC,IAAA,KAG6BV,QAAA,CAAAW,UAAA,IAAAX,QAAA,CAAAW,UAAA,IAAAD,IAAA,CAAU;UAC/BvB,mBAAA,CAMM,cALJyB,UAA+B,EAC/BR,YAAA,CAGqBS,6BAAA;QAHDC,KAAK,EAAC,kBAAkB;QAAgBC,IAAI,EAAC;;QAN3Eb,OAAA,EAAAC,QAAA,CAOkJa,KAD9E,K,gBACxD7B,mBAAA,CAAsI;UAA/H8B,IAAI,EAAC,MAAM;UAACC,EAAE,EAAC,MAAM;UAPxC,uBAAAtB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOkDH,KAAA,CAAAyB,aAAa,CAACJ,IAAI,GAAAlB,MAAA;UAAGP,KAAK,EAP5E8B,eAAA;YAAA,cAO8FJ,KAAK,IAAIA,KAAK,CAACK,MAAM,IAAIL,KAAK,CAACK,MAAM,CAACC,MAAM;UAAA;gDAAxF5B,KAAA,CAAAyB,aAAa,CAACJ,IAAI,E,GAC5CC,KAAK,IAAIA,KAAK,CAACK,MAAM,IAAIL,KAAK,CAACK,MAAM,CAACC,MAAM,Q,cAAxDC,mBAAA,CAAmH,QAAnHC,UAAmH,EAAAC,gBAAA,CAAzBT,KAAK,CAACK,MAAM,uBARlHK,mBAAA,e;QAAAC,CAAA;YAWQD,mBAAA,gEAAmE,EAEnEvC,mBAAA,CAAwF;QAAhF8B,IAAI,EAAC,QAAQ;QAAEW,QAAQ,EAAErB,UAAU,GAAGA,UAAU,CAACsB,OAAO;SAAS,QAAM,iBAbvFC,UAAA,E;MAAAH,CAAA;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}