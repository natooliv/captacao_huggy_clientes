{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: {\n        ...this.contact\n      } // Initialize editedContact with the contact data\n    };\n  },\n  methods: {\n    resetData() {\n      this.editedContact = {\n        ...this.contact\n      }; // Reset editedContact to the original contact data\n    },\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.editedContact.photo = file; // Set the photo field to the selected file\n      }\n    },\n    submitForm() {\n      const formData = new FormData();\n      Object.keys(this.editedContact).forEach(key => {\n        formData.append(key, this.editedContact[key]); // Append all fields to formData\n      });\n      axios.put('http://localhost:8000/api/clientes/' + this.contact.id, formData).then(response => {\n        console.log('Contato editado com sucesso:', response.data);\n        this.showModal = false;\n        this.$emit('update', response.data);\n      }).catch(error => {\n        console.error('Erro ao editar contato:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","contact","type","Object","required","data","showModal","editedContact","methods","resetData","handleFileUpload","event","file","target","files","photo","submitForm","formData","FormData","keys","forEach","key","append","put","id","then","response","console","log","$emit","catch","error"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/EditContactModal.vue"],"sourcesContent":["<template>\n  <b-modal v-model=\"showModal\" title=\"Editar Contato\" @hidden=\"resetData\">\n    <form @submit.prevent=\"submitForm\">\n      <div>\n        <label for=\"name\">Nome:</label>\n        <input type=\"text\" id=\"name\" v-model=\"editedContact.name\" required>\n      </div>\n      <div>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" v-model=\"editedContact.email\" required>\n      </div>\n      <div>\n        <label for=\"phone\">Telefone:</label>\n        <input type=\"text\" id=\"phone\" v-model=\"editedContact.phone\" required>\n      </div>\n      <div>\n        <label for=\"address\">Endere√ßo:</label>\n        <input type=\"text\" id=\"address\" v-model=\"editedContact.address\" required>\n      </div>\n      <div>\n        <label for=\"photo\">Foto (URL ou Upload):</label>\n        <input type=\"file\" id=\"photo\" ref=\"photo\" @change=\"handleFileUpload\" accept=\"image/*\">\n      </div>\n      <button type=\"submit\">Salvar</button>\n    </form>\n  </b-modal>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'EditContactModal',\n  props: {\n    contact: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      showModal: false,\n      editedContact: { ...this.contact } // Initialize editedContact with the contact data\n    };\n  },\n  methods: {\n    resetData() {\n      this.editedContact = { ...this.contact }; // Reset editedContact to the original contact data\n    },\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.editedContact.photo = file; // Set the photo field to the selected file\n      }\n    },\n    submitForm() {\n      const formData = new FormData();\n      Object.keys(this.editedContact).forEach(key => {\n        formData.append(key, this.editedContact[key]); // Append all fields to formData\n      });\n\n      axios.put('http://localhost:8000/api/clientes/' + this.contact.id, formData)\n        .then(response => {\n          console.log('Contato editado com sucesso:', response.data);\n          this.showModal = false;\n          this.$emit('update', response.data);\n        })\n        .catch(error => {\n          console.error('Erro ao editar contato:', error);\n        });\n    }\n  }\n};\n</script>\n"],"mappings":"AA6BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAE;IACLC,OAAO,EAAE;MACPC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,aAAa,EAAE;QAAE,GAAG,IAAI,CAACN;MAAQ,EAAE;IACrC,CAAC;EACH,CAAC;EACDO,OAAO,EAAE;IACPC,SAASA,CAAA,EAAG;MACV,IAAI,CAACF,aAAY,GAAI;QAAE,GAAG,IAAI,CAACN;MAAQ,CAAC,EAAE;IAC5C,CAAC;IACDS,gBAAgBA,CAACC,KAAK,EAAE;MACtB,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,IAAIF,IAAI,EAAE;QACR,IAAI,CAACL,aAAa,CAACQ,KAAI,GAAIH,IAAI,EAAE;MACnC;IACF,CAAC;IACDI,UAAUA,CAAA,EAAG;MACX,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/Bf,MAAM,CAACgB,IAAI,CAAC,IAAI,CAACZ,aAAa,CAAC,CAACa,OAAO,CAACC,GAAE,IAAK;QAC7CJ,QAAQ,CAACK,MAAM,CAACD,GAAG,EAAE,IAAI,CAACd,aAAa,CAACc,GAAG,CAAC,CAAC,EAAE;MACjD,CAAC,CAAC;MAEFvB,KAAK,CAACyB,GAAG,CAAC,qCAAoC,GAAI,IAAI,CAACtB,OAAO,CAACuB,EAAE,EAAEP,QAAQ,EACxEQ,IAAI,CAACC,QAAO,IAAK;QAChBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,QAAQ,CAACrB,IAAI,CAAC;QAC1D,IAAI,CAACC,SAAQ,GAAI,KAAK;QACtB,IAAI,CAACuB,KAAK,CAAC,QAAQ,EAAEH,QAAQ,CAACrB,IAAI,CAAC;MACrC,CAAC,EACAyB,KAAK,CAACC,KAAI,IAAK;QACdJ,OAAO,CAACI,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,CAAC;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}