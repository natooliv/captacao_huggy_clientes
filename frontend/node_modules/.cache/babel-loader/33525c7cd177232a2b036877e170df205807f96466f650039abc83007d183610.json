{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-002fd7de\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Nome\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Email\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Telefone\")])], -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.loginWithHuggy && $options.loginWithHuggy(...args))\n  }, \"Login com Huggy\"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"search\",\n    placeholder: \"Buscar contato\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.searchQuery = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchQuery]]), _createCommentVNode(\" Tabela de contatos \"), _createElementVNode(\"table\", null, [_hoisted_1, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredContacts, contact => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: contact.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(contact.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(contact.email), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(contact.phone), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","onClick","_cache","args","$options","loginWithHuggy","type","placeholder","$event","$data","searchQuery","_createCommentVNode","_hoisted_1","_Fragment","_renderList","filteredContacts","contact","key","id","_toDisplayString","name","email","phone"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/ContactList.vue"],"sourcesContent":["<template>\n  <div>\n    <button @click=\"loginWithHuggy\">Login com Huggy</button>\n    <input type=\"search\" placeholder=\"Buscar contato\" v-model=\"searchQuery\">\n    <!-- Tabela de contatos -->\n    <table>\n      <thead>\n        <tr>\n          <th>Nome</th>\n          <th>Email</th>\n          <th>Telefone</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"contact in filteredContacts\" :key=\"contact.id\">\n          <td>{{ contact.name }}</td>\n          <td>{{ contact.email }}</td>\n          <td>{{ contact.phone }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'ContactList',\n  data() {\n    return {\n      searchQuery: '',\n      contacts: [],\n    };\n  },\n  computed: {\n    filteredContacts() {\n      return this.contacts.filter(contact =>\n        contact.name.toLowerCase().includes(this.searchQuery.toLowerCase())\n      );\n    },\n  },\n  methods: {\n    async loginWithHuggy() {\n      try {\n        // Faz a chamada para autenticar o usuário com o backend\n        const response = await fetch('http://localhost:8001/api/auth/google', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (response.ok) {\n          // Autenticação bem-sucedida\n          console.log('Usuário autenticado com sucesso.');\n\n          // Após o login bem-sucedido, busca os contatos\n          this.fetchContacts();\n        } else {\n          // Trata o erro de autenticação\n          console.error('Erro ao autenticar usuário:', response.statusText);\n        }\n      } catch (error) {\n        // Trata erros de rede ou outros erros\n        console.error('Erro ao autenticar usuário:', error.message);\n      }\n    },\n    fetchContacts() {\n      axios.get('http://localhost:8000/api/clientes')\n        .then(response => {\n          if (Array.isArray(response.data)) {\n            this.contacts = response.data;\n          } else {\n            console.error('A resposta da API não é um array:', response.data);\n            this.contacts = [];\n          }\n        })\n        .catch(error => {\n          console.error('Ocorreu um erro ao buscar os clientes:', error);\n          this.contacts = [];\n        });\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Estilos para ContactList */\n</style>\n"],"mappings":";;gEAMMA,mBAAA,CAMQ,gB,aALNA,mBAAA,CAIK,a,aAHHA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAAc,YAAV,OAAK,G,aACTA,mBAAA,CAAiB,YAAb,UAAQ,E;;uBATpBC,mBAAA,CAoBM,cAnBJD,mBAAA,CAAwD;IAA/CE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,cAAA,IAAAD,QAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;KAAE,iBAAe,G,gBAC/CJ,mBAAA,CAAwE;IAAjEO,IAAI,EAAC,QAAQ;IAACC,WAAW,EAAC,gBAAgB;IAHrD,uBAAAL,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAG+DC,KAAA,CAAAC,WAAW,GAAAF,MAAA;iDAAXC,KAAA,CAAAC,WAAW,E,GACtEC,mBAAA,wBAA2B,EAC3BZ,mBAAA,CAeQ,gBAdNa,UAMQ,EACRb,mBAAA,CAMQ,iB,kBALNC,mBAAA,CAIKa,SAAA,QAlBbC,WAAA,CAc8BV,QAAA,CAAAW,gBAAgB,EAA3BC,OAAO;yBAAlBhB,mBAAA,CAIK;MAJoCiB,GAAG,EAAED,OAAO,CAACE;QACpDnB,mBAAA,CAA2B,YAAAoB,gBAAA,CAApBH,OAAO,CAACI,IAAI,kBACnBrB,mBAAA,CAA4B,YAAAoB,gBAAA,CAArBH,OAAO,CAACK,KAAK,kBACpBtB,mBAAA,CAA4B,YAAAoB,gBAAA,CAArBH,OAAO,CAACM,KAAK,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}