{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'ContactList',\n  data() {\n    return {\n      searchQuery: '',\n      contacts: []\n    };\n  },\n  computed: {\n    filteredContacts() {\n      return this.contacts.filter(contact => contact.name.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    }\n  },\n  methods: {\n    async loginWithHuggy() {\n      try {\n        // Faz a chamada para autenticar o usuário com o backend\n        const response = await fetch('http://localhost:8001/api/auth/google', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          // Autenticação bem-sucedida\n          console.log('Usuário autenticado com sucesso.');\n\n          // Após o login bem-sucedido, busca os contatos\n          this.fetchContacts();\n        } else {\n          // Trata o erro de autenticação\n          console.error('Erro ao autenticar usuário:', response.statusText);\n        }\n      } catch (error) {\n        // Trata erros de rede ou outros erros\n        console.error('Erro ao autenticar usuário:', error.message);\n      }\n    },\n    fetchContacts() {\n      axios.get('http://localhost:8000/api/clientes').then(response => {\n        if (Array.isArray(response.data)) {\n          this.contacts = response.data;\n        } else {\n          console.error('A resposta da API não é um array:', response.data);\n          this.contacts = [];\n        }\n      }).catch(error => {\n        console.error('Ocorreu um erro ao buscar os clientes:', error);\n        this.contacts = [];\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","searchQuery","contacts","computed","filteredContacts","filter","contact","toLowerCase","includes","methods","loginWithHuggy","response","fetch","method","headers","ok","console","log","fetchContacts","error","statusText","message","get","then","Array","isArray","catch"],"sources":["/home/natalia/teste_huggy_/huggy/src/components/ContactList.vue"],"sourcesContent":["<template>\n  <div>\n    <button @click=\"loginWithHuggy\">Login com Huggy</button>\n    <input type=\"search\" placeholder=\"Buscar contato\" v-model=\"searchQuery\">\n    <!-- Tabela de contatos -->\n    <table>\n      <thead>\n        <tr>\n          <th>Nome</th>\n          <th>Email</th>\n          <th>Telefone</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"contact in filteredContacts\" :key=\"contact.id\">\n          <td>{{ contact.name }}</td>\n          <td>{{ contact.email }}</td>\n          <td>{{ contact.phone }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'ContactList',\n  data() {\n    return {\n      searchQuery: '',\n      contacts: [],\n    };\n  },\n  computed: {\n    filteredContacts() {\n      return this.contacts.filter(contact =>\n        contact.name.toLowerCase().includes(this.searchQuery.toLowerCase())\n      );\n    },\n  },\n  methods: {\n    async loginWithHuggy() {\n      try {\n        // Faz a chamada para autenticar o usuário com o backend\n        const response = await fetch('http://localhost:8001/api/auth/google', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (response.ok) {\n          // Autenticação bem-sucedida\n          console.log('Usuário autenticado com sucesso.');\n\n          // Após o login bem-sucedido, busca os contatos\n          this.fetchContacts();\n        } else {\n          // Trata o erro de autenticação\n          console.error('Erro ao autenticar usuário:', response.statusText);\n        }\n      } catch (error) {\n        // Trata erros de rede ou outros erros\n        console.error('Erro ao autenticar usuário:', error.message);\n      }\n    },\n    fetchContacts() {\n      axios.get('http://localhost:8000/api/clientes')\n        .then(response => {\n          if (Array.isArray(response.data)) {\n            this.contacts = response.data;\n          } else {\n            console.error('A resposta da API não é um array:', response.data);\n            this.contacts = [];\n          }\n        })\n        .catch(error => {\n          console.error('Ocorreu um erro ao buscar os clientes:', error);\n          this.contacts = [];\n        });\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Estilos para ContactList */\n</style>\n"],"mappings":"AAyBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,gBAAgBA,CAAA,EAAG;MACjB,OAAO,IAAI,CAACF,QAAQ,CAACG,MAAM,CAACC,OAAM,IAChCA,OAAO,CAACP,IAAI,CAACQ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACP,WAAW,CAACM,WAAW,CAAC,CAAC,CACpE,CAAC;IACH;EACF,CAAC;EACDE,OAAO,EAAE;IACP,MAAMC,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF;QACA,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,uCAAuC,EAAE;UACpEC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QAEF,IAAIH,QAAQ,CAACI,EAAE,EAAE;UACf;UACAC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;;UAE/C;UACA,IAAI,CAACC,aAAa,CAAC,CAAC;QACtB,OAAO;UACL;UACAF,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAER,QAAQ,CAACS,UAAU,CAAC;QACnE;MACF,EAAE,OAAOD,KAAK,EAAE;QACd;QACAH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACE,OAAO,CAAC;MAC7D;IACF,CAAC;IACDH,aAAaA,CAAA,EAAG;MACdpB,KAAK,CAACwB,GAAG,CAAC,oCAAoC,EAC3CC,IAAI,CAACZ,QAAO,IAAK;QAChB,IAAIa,KAAK,CAACC,OAAO,CAACd,QAAQ,CAACX,IAAI,CAAC,EAAE;UAChC,IAAI,CAACE,QAAO,GAAIS,QAAQ,CAACX,IAAI;QAC/B,OAAO;UACLgB,OAAO,CAACG,KAAK,CAAC,mCAAmC,EAAER,QAAQ,CAACX,IAAI,CAAC;UACjE,IAAI,CAACE,QAAO,GAAI,EAAE;QACpB;MACF,CAAC,EACAwB,KAAK,CAACP,KAAI,IAAK;QACdH,OAAO,CAACG,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9D,IAAI,CAACjB,QAAO,GAAI,EAAE;MACpB,CAAC,CAAC;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}