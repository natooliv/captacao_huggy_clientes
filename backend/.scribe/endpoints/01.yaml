name: 'Gerenciamento de Clientes'
description: |-

  APIs para gerenciamento de clientes
endpoints:
  -
    httpMethods:
      - GET
    uri: api/clientes
    metadata:
      groupName: 'Gerenciamento de Clientes'
      groupDescription: |-

        APIs para gerenciamento de clientes
      subgroup: ''
      subgroupDescription: ''
      title: 'Listar todos os clientes'
      description: 'Retorna uma lista de clientes do banco de dados.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "id": 1,
           "name": "João Silva",
           "email": "joao@example.com",
           "phone": "123456789",
           "address": "Rua Exemplo, 123",
           "photo": "url/para/foto"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/clientes
    metadata:
      groupName: 'Gerenciamento de Clientes'
      groupDescription: |-

        APIs para gerenciamento de clientes
      subgroup: ''
      subgroupDescription: ''
      title: 'Criar um novo cliente'
      description: 'Recebe dados para criar um novo cliente e retorna os dados do cliente criado.'
      authenticated: false
      custom: []
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'O nome do cliente.'
        required: true
        example: qui
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      email:
        name: email
        description: 'O email do cliente.'
        required: true
        example: gnikolaus@example.org
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      phone:
        name: phone
        description: 'O telefone do cliente.'
        required: true
        example: quae
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      address:
        name: address
        description: 'O endereço do cliente.'
        required: true
        example: quia
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      photo:
        name: photo
        description: 'O arquivo de foto do cliente.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      name: qui
      email: gnikolaus@example.org
      phone: quae
      address: quia
    fileParameters:
      photo: null
    responses:
      -
        status: 201
        content: |-
          {
           "id": 10,
           "name": "Maria Oliveira",
           "email": "maria@example.com",
           "phone": "987654321",
           "address": "Avenida Exemplo, 456",
           "photo": "url/para/foto"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: '{"error": "Erro de validação dos dados."}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/clientes/{id}'
    metadata:
      groupName: 'Gerenciamento de Clientes'
      groupDescription: |-

        APIs para gerenciamento de clientes
      subgroup: ''
      subgroupDescription: ''
      title: 'Exibir um cliente específico'
      description: 'Retorna os dados de um cliente específico.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'O ID do cliente.'
        required: true
        example: et
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      id: et
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "id": 1,
           "name": "João Silva",
           "email": "joao@example.com",
           "phone": "123456789",
           "address": "Rua Exemplo, 123",
           "photo": "url/para/foto"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error": "Cliente não encontrado."}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/clientes/{id}'
    metadata:
      groupName: 'Gerenciamento de Clientes'
      groupDescription: |-

        APIs para gerenciamento de clientes
      subgroup: ''
      subgroupDescription: ''
      title: 'Atualizar cliente'
      description: 'Atualiza os dados de um cliente existente.'
      authenticated: false
      custom: []
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'O ID do cliente.'
        required: true
        example: qui
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      id: qui
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'O nome do cliente.'
        required: false
        example: aspernatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      email:
        name: email
        description: 'O email do cliente.'
        required: false
        example: conroy.buck@example.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      phone:
        name: phone
        description: 'O telefone do cliente.'
        required: false
        example: dolorem
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      address:
        name: address
        description: 'O endereço do cliente.'
        required: false
        example: qui
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      photo:
        name: photo
        description: 'O arquivo de foto do cliente.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      name: aspernatur
      email: conroy.buck@example.com
      phone: dolorem
      address: qui
    fileParameters:
      photo: null
    responses:
      -
        status: 200
        content: |-
          {
           "id": 10,
           "name": "Maria Oliveira",
           "email": "maria_update@example.com",
           "phone": "987654321",
           "address": "Avenida Exemplo, 456",
           "photo": "url/para/foto/atualizada"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: '{"error": "Erro de validação dos dados."}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error": "Cliente não encontrado."}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/clientes/{cliente}'
    metadata:
      groupName: 'Gerenciamento de Clientes'
      groupDescription: |-

        APIs para gerenciamento de clientes
      subgroup: ''
      subgroupDescription: ''
      title: 'Excluir cliente'
      description: 'Exclui um cliente existente e sua foto associada, se houver.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      cliente:
        name: cliente
        description: 'The cliente.'
        required: true
        example: velit
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      clientId:
        name: clientId
        description: 'O ID do cliente.'
        required: true
        example: laudantium
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      cliente: velit
      clientId: laudantium
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 204
        content: '{}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error": "Cliente não encontrado."}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/upload-image
    metadata:
      groupName: 'Gerenciamento de Clientes'
      groupDescription: |-

        APIs para gerenciamento de clientes
      subgroup: ''
      subgroupDescription: ''
      title: 'Fazer upload de imagem do cliente'
      description: 'Faz o upload de um arquivo de imagem para o cliente.'
      authenticated: false
      custom: []
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      photo:
        name: photo
        description: 'O arquivo de imagem para upload.'
        required: true
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters: []
    fileParameters:
      photo: null
    responses:
      -
        status: 200
        content: |-
          {
           "temporaryPath": "/caminho/para/arquivo/temporário"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: '{"error": "Nenhum arquivo enviado."}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
