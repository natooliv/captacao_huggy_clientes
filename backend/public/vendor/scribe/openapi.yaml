openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/auth/google:
    post:
      summary: 'Autenticação com o Google'
      operationId: autenticaoComOGoogle
      description: 'Autentica o usuário com o Google e retorna os dados do usuário.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  user:
                    id: 1
                    name: 'John Doe'
                    email: john@example.com
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        example: john@example.com
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Erro na autenticação'
                properties:
                  error:
                    type: string
                    example: 'Erro na autenticação'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'O token de acesso do usuário.'
                  example: consequuntur
              required:
                - token
    get:
      summary: 'Autenticação com o Google'
      operationId: autenticaoComOGoogle
      description: 'Autentica o usuário com o Google e retorna os dados do usuário.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  user:
                    id: 1
                    name: 'John Doe'
                    email: john@example.com
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        example: john@example.com
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Erro na autenticação'
                properties:
                  error:
                    type: string
                    example: 'Erro na autenticação'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'O token de acesso do usuário.'
                  example: unde
              required:
                - token
  /api/documentation:
    get:
      summary: 'Display Swagger API page.'
      operationId: displaySwaggerAPIPage
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>L5 Swagger UI</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/docs/asset/swagger-ui.css?v=c64e1b966629d8c1f6cab103d6e01bbd\">\n    <link rel=\"icon\" type=\"image/png\" href=\"http://localhost/docs/asset/favicon-32x32.png?v=40d4f2c38d1cd854ad463f16373cbcb6\" sizes=\"32x32\"/>\n    <link rel=\"icon\" type=\"image/png\" href=\"http://localhost/docs/asset/favicon-16x16.png?v=f0ae831196d55d8f4115b6c5e8ec5384\" sizes=\"16x16\"/>\n    <style>\n    html\n    {\n        box-sizing: border-box;\n        overflow: -moz-scrollbars-vertical;\n        overflow-y: scroll;\n    }\n    *,\n    *:before,\n    *:after\n    {\n        box-sizing: inherit;\n    }\n\n    body {\n      margin:0;\n      background: #fafafa;\n    }\n    </style>\n</head>\n\n<body>\n<div id=\"swagger-ui\"></div>\n\n<script src=\"http://localhost/docs/asset/swagger-ui-bundle.js?v=337638f76099b9d57f1368646822360f\"></script>\n<script src=\"http://localhost/docs/asset/swagger-ui-standalone-preset.js?v=789de7a58ec7baabacf5b2f9b17843b3\"></script>\n<script>\n    window.onload = function() {\n        // Build a system\n        const ui = SwaggerUIBundle({\n            dom_id: '#swagger-ui',\n            url: \"http://localhost/docs/api-docs.json\",\n            operationsSorter: null,\n            configUrl: null,\n            validatorUrl: null,\n            oauth2RedirectUrl: \"http://localhost/api/oauth2-callback\",\n\n            requestInterceptor: function(request) {\n                request.headers['X-CSRF-TOKEN'] = '';\n                return request;\n            },\n\n            presets: [\n                SwaggerUIBundle.presets.apis,\n                SwaggerUIStandalonePreset\n            ],\n\n            plugins: [\n                SwaggerUIBundle.plugins.DownloadUrl\n            ],\n\n            layout: \"StandaloneLayout\",\n            docExpansion : \"none\",\n            deepLinking: true,\n            filter: true,\n            persistAuthorization: \"false\",\n\n        })\n\n        window.ui = ui\n\n            }\n</script>\n</body>\n</html>\n"
      tags:
        - Endpoints
      security: []
  /api/oauth2-callback:
    get:
      summary: 'Display Oauth2 callback pages.'
      operationId: displayOauth2CallbackPages
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "<!doctype html>\n<html lang=\"en-US\">\n<head>\n    <title>Swagger UI: OAuth2 Redirect</title>\n</head>\n<body>\n<script>\n    'use strict';\n    function run () {\n        var oauth2 = window.opener.swaggerUIRedirectOauth2;\n        var sentState = oauth2.state;\n        var redirectUrl = oauth2.redirectUrl;\n        var isValid, qp, arr;\n\n        if (/code|token|error/.test(window.location.hash)) {\n            qp = window.location.hash.substring(1).replace('?', '&');\n        } else {\n            qp = location.search.substring(1);\n        }\n\n        arr = qp.split(\"&\");\n        arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n        qp = qp ? JSON.parse('{' + arr.join() + '}',\n                function (key, value) {\n                    return key === \"\" ? value : decodeURIComponent(value);\n                }\n        ) : {};\n\n        isValid = qp.state === sentState;\n\n        if ((\n          oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n          oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n          oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n        ) && !oauth2.auth.code) {\n            if (!isValid) {\n                oauth2.errCb({\n                    authId: oauth2.auth.name,\n                    source: \"auth\",\n                    level: \"warning\",\n                    message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                });\n            }\n\n            if (qp.code) {\n                delete oauth2.state;\n                oauth2.auth.code = qp.code;\n                oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n            } else {\n                let oauthErrorMsg;\n                if (qp.error) {\n                    oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                        (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                        (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                }\n\n                oauth2.errCb({\n                    authId: oauth2.auth.name,\n                    source: \"auth\",\n                    level: \"error\",\n                    message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                });\n            }\n        } else {\n            oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n        }\n        window.close();\n    }\n\n    if (document.readyState !== 'loading') {\n        run();\n    } else {\n        document.addEventListener('DOMContentLoaded', function () {\n            run();\n        });\n    }\n</script>\n</body>\n</html>\n"
      tags:
        - Endpoints
      security: []
  /api/clientes:
    get:
      summary: 'Listar todos os clientes'
      operationId: listarTodosOsClientes
      description: 'Retorna uma lista de clientes do banco de dados.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: 'João Silva'
                  email: joao@example.com
                  phone: '123456789'
                  address: 'Rua Exemplo, 123'
                  photo: url/para/foto
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: 'João Silva'
                  email:
                    type: string
                    example: joao@example.com
                  phone:
                    type: string
                    example: '123456789'
                  address:
                    type: string
                    example: 'Rua Exemplo, 123'
                  photo:
                    type: string
                    example: url/para/foto
      tags:
        - 'Gerenciamento de Clientes'
      security: []
    post:
      summary: 'Criar um novo cliente'
      operationId: criarUmNovoCliente
      description: 'Recebe dados para criar um novo cliente e retorna os dados do cliente criado.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 10
                  name: 'Maria Oliveira'
                  email: maria@example.com
                  phone: '987654321'
                  address: 'Avenida Exemplo, 456'
                  photo: url/para/foto
                properties:
                  id:
                    type: integer
                    example: 10
                  name:
                    type: string
                    example: 'Maria Oliveira'
                  email:
                    type: string
                    example: maria@example.com
                  phone:
                    type: string
                    example: '987654321'
                  address:
                    type: string
                    example: 'Avenida Exemplo, 456'
                  photo:
                    type: string
                    example: url/para/foto
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Erro de validação dos dados.'
                properties:
                  error:
                    type: string
                    example: 'Erro de validação dos dados.'
      tags:
        - 'Gerenciamento de Clientes'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'O nome do cliente.'
                  example: aperiam
                email:
                  type: string
                  description: 'O email do cliente.'
                  example: uoconner@example.net
                phone:
                  type: string
                  description: 'O telefone do cliente.'
                  example: suscipit
                address:
                  type: string
                  description: 'O endereço do cliente.'
                  example: mollitia
                photo:
                  type: string
                  format: binary
                  description: 'O arquivo de foto do cliente.'
              required:
                - name
                - email
                - phone
                - address
      security: []
  '/api/clientes/{id}':
    get:
      summary: 'Exibir um cliente específico'
      operationId: exibirUmClienteEspecfico
      description: 'Retorna os dados de um cliente específico.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: 'João Silva'
                  email: joao@example.com
                  phone: '123456789'
                  address: 'Rua Exemplo, 123'
                  photo: url/para/foto
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: 'João Silva'
                  email:
                    type: string
                    example: joao@example.com
                  phone:
                    type: string
                    example: '123456789'
                  address:
                    type: string
                    example: 'Rua Exemplo, 123'
                  photo:
                    type: string
                    example: url/para/foto
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Cliente não encontrado.'
                properties:
                  error:
                    type: string
                    example: 'Cliente não encontrado.'
      tags:
        - 'Gerenciamento de Clientes'
      security: []
    put:
      summary: 'Atualizar cliente'
      operationId: atualizarCliente
      description: 'Atualiza os dados de um cliente existente.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 10
                  name: 'Maria Oliveira'
                  email: maria_update@example.com
                  phone: '987654321'
                  address: 'Avenida Exemplo, 456'
                  photo: url/para/foto/atualizada
                properties:
                  id:
                    type: integer
                    example: 10
                  name:
                    type: string
                    example: 'Maria Oliveira'
                  email:
                    type: string
                    example: maria_update@example.com
                  phone:
                    type: string
                    example: '987654321'
                  address:
                    type: string
                    example: 'Avenida Exemplo, 456'
                  photo:
                    type: string
                    example: url/para/foto/atualizada
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Erro de validação dos dados.'
                properties:
                  error:
                    type: string
                    example: 'Erro de validação dos dados.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Cliente não encontrado.'
                properties:
                  error:
                    type: string
                    example: 'Cliente não encontrado.'
      tags:
        - 'Gerenciamento de Clientes'
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'O nome do cliente.'
                  example: voluptas
                email:
                  type: string
                  description: 'O email do cliente.'
                  example: walker.lisandro@example.com
                phone:
                  type: string
                  description: 'O telefone do cliente.'
                  example: esse
                address:
                  type: string
                  description: 'O endereço do cliente.'
                  example: rerum
                photo:
                  type: string
                  format: binary
                  description: 'O arquivo de foto do cliente.'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'O ID do cliente.'
        example: qui
        required: true
        schema:
          type: string
  '/api/clientes/{cliente}':
    delete:
      summary: 'Excluir cliente'
      operationId: excluirCliente
      description: 'Exclui um cliente existente e sua foto associada, se houver.'
      parameters: []
      responses:
        204:
          description: ''
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Cliente não encontrado.'
                properties:
                  error:
                    type: string
                    example: 'Cliente não encontrado.'
      tags:
        - 'Gerenciamento de Clientes'
      security: []
    parameters:
      -
        in: path
        name: cliente
        description: 'The cliente.'
        example: sit
        required: true
        schema:
          type: string
      -
        in: path
        name: clientId
        description: 'O ID do cliente.'
        example: accusamus
        required: true
        schema:
          type: string
  /api/upload-image:
    post:
      summary: 'Fazer upload de imagem do cliente'
      operationId: fazerUploadDeImagemDoCliente
      description: 'Faz o upload de um arquivo de imagem para o cliente.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  temporaryPath: /caminho/para/arquivo/temporário
                properties:
                  temporaryPath:
                    type: string
                    example: /caminho/para/arquivo/temporário
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Nenhum arquivo enviado.'
                properties:
                  error:
                    type: string
                    example: 'Nenhum arquivo enviado.'
      tags:
        - 'Gerenciamento de Clientes'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: 'O arquivo de imagem para upload.'
              required:
                - photo
      security: []
tags:
  -
    name: Authentication
    description: "\nOperações de Autenticação"
  -
    name: Endpoints
    description: ''
  -
    name: 'Gerenciamento de Clientes'
    description: "\nAPIs para gerenciamento de clientes"
